// Lesson17.cpp: определяет точку входа для консольного приложения.
//

#include "stdafx.h"

//	Повторение пройденного материала
/*
1.	Для чего предназначены дополнительные диалоговые окна ?
2.	Какой отличительной особенностью обладает модальное 
	диалоговое окно ?
3.	Какая функция API позволяет отобразить модальное диалоговое 
	окно ?
4.	В чем заключается механизм обмена данными между главным 
	окном приложения и дополнительным модальным диалоговым окном ?
5.	Посредством какой функции можно получить дескриптор 
	родительского окна ?
6.	Какая функция API предназначена для создания и 
	отображения модального диалога «Открыть» ?
7.	Какая функция API предназначена для создания и 
	отображения модального диалога «Сохранить» ?
*/

// Дополнительные немодальные диалоги
/*
Отличительной особенностью дополнительного модального окна 
является блокирование доступа к остальным окнам приложения 
до тех пор, пока модальное окно не будет закрыто. 

В отличие от модального окна немодальный диалог НЕ задерживает 
выполнение программы, то есть для ее продолжения не требуется 
завершение диалога. 

При этом допускается переключение между диалогом и другими 
окнами приложения.  

Таким образом, немодальный диалог может получать и терять 
фокус ввода. 
Диалоги этого типа предпочтительней использовать в тех случаях,
когда они содержат элементы управления, которые должны быть 
в любой момент доступны пользователю. 

Типичным примером немодального диалога может послужить 
диалоговое окно «Найти» приложения «Блокнот».
*/

// Создание и отображения немодального диалогового окна
/*
•	Определить диалог в файле описания ресурсов;
•	Определить в приложении диалоговую процедуру, 
	обеспечивающую обработку сообщений для дополнительного 
	диалогового окна;
•	Вызвать функцию API CreateDialog для создания немодального 
	диалога;
•	Установить  значение True  для  свойства  Visible  в  
	свойствах шаблона  диалога для отображения немодального 
	окна(другой способ отображения немодального окна-вызов 
	функции API ShowWindow);

Для активизации дополнительного немодального окна 
применяется функция WinA-PI SetForegroundWindow.

	BOOL SetForegroundWindow(HWND hWnd);

*/

// Стандартный диалог «Найти»
/*
	Стандартный диалог «Найти» предоставляет пользователю 
	возможность поиска в тексте определенной 
	последовательности символов.

	Для создания и отображения немодального диалога «Найти»
	предназначена функция API FindText.

	HWND FindText(
		LPFINDREPLACE lpfr // указатель на структуру 
						   // FINDREPLACE, которая содержит 
						   // информацию, используемую для 
						   // инициализации диалога «Найти»
	);
	https://msdn.microsoft.com/en-us/library/windows/desktop/ms646829%28v=vs.85%29.aspx#finding_text
	В случае успешного создания диалогового окна данная 
	функция вернет дескриптор диалога.
*/

// Стандартный диалог «Заменить»
/*
	Стандартный диалог «Заменить» предоставляет 
	пользователю возможность поиска в тексте 
	определенной последовательности символов и 
	замены ее на другую последовательность символов.

	Для создания и отображения немодального диалога «Заменить»
	предназначена функция API ReplaceText.
	
	HWND ReplaceText(
		LPFINDREPLACE lpfr // указатель на структуру 
						   //FINDREPLACE, которая содержит 
						   // информацию, используемую для 
						   // инициализации диалога «Заменить»
	);

	В случае успешного создания диалогового окна данная
	функция вернет дескриптор диалога.

*/

// Структура FINDREPLACE
/*
Обе вышеописанные функции в качестве параметра принимают 
указатель на структуру FINDREPLACE, которая содержит 
информацию, используемую для инициализации диалога.

https://msdn.microsoft.com/en-us/library/windows/desktop/ms646835%28v=vs.85%29.aspx

typedef struct {
	DWORD lStructSize;		// длина структуры в байтах
	HWND hwndOwner;			// дескриптор окна, которое владеет
							// диалогом
	HINSTANCE hInstance;	// дескриптор приложения, если 
							// установлен флаг     
							// FR_ENABLETEMPLATE, либо 
							// дескриптор объекта памяти, 
							// содержащего шаблон    
							// диалогового окна, если 
							// установлен флаг 
							// FR_ENABLETEMPLATEHANDLE
	DWORD Flags;			// набор флагов, используемых для 
							// инициализации диалога
	LPTSTR lpstrFindWhat;	// указатель на буфер, содержащий 
							// строку для поиска
	LPTSTR lpstrReplaceWith;// указатель на буфер, содержащий 
							// строку для  замены
	WORD wFindWhatLen;		// размер в байтах буфера, 
							// содержащего строку для поиска
	WORD wReplaceWithLen;	// размер в байтах буфера, 
							// содержащего строку для    
							// замены
	LPARAM lCustData;		// данные, которые передаются в 
							// HOOK-процедуру
	LPFRHOOKPROC lpfnHook;	// адрес HOOK-процедуры (должен 
							// быть включен флаг 
							// FR_ENABLEHOOK)
	LPCTSTR lpTemplateName; // Указатель на строку, которая 
							// именует  ресурс шаблона диалога 
							// в модуле, идентифицированном 
							// полем hInstance
} FINDREPLACE, *LPFINDREPLACE;
*/

// Поле Flags структуры FINDREPLACE 
/*
Поле Flags структуры FINDREPLACE представляет собой 
комбинацию из одного или нескольких флагов, объединенных 
с помощью поразряд - ной операции «ИЛИ», и используемых 
для инициализации диалога.

Ниже представлены наиболее часто используемые флаги.
•	FR_DOWN - если флаг установлен, то из радиокнопок 
			  направления выбрана кнопка «Вниз»(Down), 
			  которая указывает, что пользователь желает 
			  искать от текущего положения каретки в тексте 
			  до конца документа.
			  Если флажок FR_DOWN не установлен, то выбрана 
			  кнопка «Вверх»(Up), что означает, что 
			  пользователь желает осуществлять поиск к началу 
			  документа.
•	FR_MATCHCASE - если флаг установлен, то в чекбоксе 
			  «С учетом регистра»(Match Case) стоит галочка, 
			  показывая, что пользователь желает, чтобы поиск 
			  был чувствителен к регистру.
			  Если FR_MATCHCASE не установлен, то в чекбоксе 
			  галочки нет, так что поиск должен быть не 
			  чувствительным к регистру.
•	FR_WHOLEWORD - если флаг установлен, то в чекбоксе 
			  «Только слово целиком»(Match Whole Word Only) 
			  стоит галочка, показывая, что будет 
			  осуществляться поиск только для целого слова, 
			  которое соответствует поисковой последовательности
			  символов.
			  Если FR_WHOLEWORD не установлен, то в чекбоксе 
			  галочки нет, и будет осуществляться поиск 
			  фрагмента слова, который соответствует 
			  поисковой последовательности символов.
*/

//Идентификатор сообщения FINDMSGSTRING.
/*
Перед  созданием  диалогового  окна «Найти» или «Заменить» 
необходимо вызвать функцию API RegisterWindowMessage, 
чтобы получить идентификатор зарегистрированного сообщения 
FINDMSGSTRING.

UINT RegisterWindowMessage(
	LPCTSTR lpString // указатель на строку, идентифицирующую сообщение, // которое необходимо зарегистрировать
	);

В дальнейшем можно использовать этот идентификатор, чтобы 
определять и обрабатывать сообщения, посылаемые из 
немодального диалогового окна.

При щелчке мышью по кнопке немодального диалогового окна 
«Найти далее»(Find Next), «Заменить»(Replace) или 
«Заменить все»(Replace All), процедура диалогового окна
передаст сообщение FINDMSGSTRING в оконную процедуру 
окна владельца(главного диалога).

Это обусловлено тем, что при создании немодального 
диалогового окна в поле hwndOwner структуры FINDREPLACE 
указывается дескриптор окна владельца.

Параметр lParam сообщения FINDMSGSTRING указывает на 
структуру FINDREPLACE, которая была определена при 
создании немодального диалогового окна.

В сообщении FINDMSGSTRING элемент Flags структуры 
FINDREPLACE включает в себя один из ниже перечисленных 
флажков, чтобы указать на событие, которое вызвало сообщение:

•	FR_DIALOGTERM - диалоговое окно закрывается.
					После того как главное окно обработает 
					это сообщение, дескриптор немодального 
					диалогового окна станет недопустимым.
•	FR_FINDNEXT –	произведен щелчок мышью по кнопке 
					«Найти далее» в диалоговом окне «Найти» 
					или «Заменить».
					При этом поле lpstrFindWhat определяет 
					последовательность символов для поиска.
•	FR_REPLACE -	произведен щелчок мышью по кнопке 
					«Заменить» в диалоговом окне «Заменить».
					При этом поле lpstrFindWhat устанавливает 
					последовательность символов, которую надо 
					заменить, а поле lpstrReplaceWith 
					устанавливает последовательность символов, 
					на которую надо заменить.
•	FR_REPLACEALL - произведен щелчок мышью по кнопке 
					«Заменить все» в диалоговом окне «Заменить».
					При этом поле lpstrFindWhat устанавливает 
					последовательность символов, которую надо 
					заменить, а поле lpstrReplaceWith 
					устанавливает последовательность символов, 
					на которую надо заменить.
*/
int _tmain(int argc, _TCHAR* argv[])
{
	return 0;
}

