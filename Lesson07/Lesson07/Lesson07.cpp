// Lesson07.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"

// Повторение пройденного материала
/*
1)	Что такое синхронное сообщение?
2)	Что такое асинхронное сообщение?
3)	Каким образом можно отправить синхронное сообщение?
4)	Каким образом можно отправить асинхронное сообщение?
5)	В чём принципиальное отличие функции SendMessage от 
    функции PostMessage?

*/

// Элемент управления «кнопка»
/*
Кнопка - это элемент управления класса BUTTON:
    - обычная кнопка (Button)
    - флажок (Check Box)
    - радио кнопка (Radio Button)

Отличаются стилями окон

Создать кнопку на форме диалога можно двумя способами:
•	с помощью средств интегрированной среды разработки 
    Microsoft Visual Studio;
•	посредством вызова функции CreateWindow
*/

// Обычная кнопка
/*
    Программный способ создания кнопок с помощью функции CreateWindow

    Стили кнопок:

    •	WS_CHILD позволяет создать кнопку как дочернее окно диалога.
    •	WS_VISIBLE управляет видимостью кнопки.
    •	BS_BITMAP указывает на то, что на кнопке должен быть рисунок 
        (растровый битовый образ) вместо текста.
    •	Стиль WS_DISABLED указывает на то, что кнопка будет запрещённой.
*/

//Программный способ перевода фокуса ввода на элемент управления:

/*
HWND SetFocus(
    HWND hWnd // дескриптор окна, приобретающего клавиатурный ввод
);
*/

//Для получения дескриптора окна (элемента управления), обладающего 
//фокусом ввода используется функция API GetFocus:
/*
    HWND GetFocus(VOID);
*/


// Флажок (Check Box)
/*
// Изменение состояния флажка
	Для того, чтобы перевести Check Box в некоторое состояние, 
	ему необходимо отправить сообщение  BM_SETCHECK, передав в 
	WPARAM одно из следующих значений:

	•	BST_CHECKED -  установить отметку;
	•	BST_UNCHECKED – снять отметку;
	•	BST_INDETERMINATE - установить неопределенное  состояние.
	
	Существует альтернативный способ программной инициализации 
	состояния элемента управления Check Box. Для этого используется 
	функция API CheckDlgButton:

*/

// Переключатель (Radio Button)
/*
    Данный элемент управления обычно применяется для установки или 
    сброса определённых опций, независимых друг от друга. 
    
    Флажок действует как двухпо-зиционный переключатель. Один щелчок 
    вызывает  появление контрольной отметки (галочки), а другой щелчок
    приводит к ее исчезновению.


	Дополнительные свойства для кнопки-переключателя:

	•	Свойство Auto позволяет элементу управления отслеживать все 
	    щелчки мышью, и при этом элемент управления сам включает или 
		выключает контрольную отметку. 
		Если же отключить свойство Auto, то управление флажком 
		полностью возлагается на приложение.

	•	Свойство Tri-state используется для создания флажка, имеющего 
		три  состояния. Кроме состояний «установлен» и «сброшен» 
		добавляется «неопределенное состояние», в котором флажок 
		отображен в серой гамме. Серый цвет показывает пользователю, 
		что выбор флажка не определен или не имеет отношения к 
		текущей операции.

	•	Свойство Push-like изменяет внешний вид флажка так, что он 
		выглядит как нажимаемая кнопка. Вместо установки галочки эта 
		кнопка переходит в нажатое состояние и остается в нем до 
		следующего щелчка мышью.
*/


/*

*/

// Практическая часть
/*
Написать игру «Крестики-нолики», учитывая следующие требования:
•	игровое поле размером 3х3 должно состоять из кнопок;
•	при нажатии на кнопку, на ней должна отобразиться картинка (крестик или нолик);
•	необходимо предотвращать попытку поставить крестик или нолик на заня-тую клетку;
•	предоставить пользователю  право выбора первого хода, используя фла-жок;
•	предусмотреть возможность выбора уровня сложности, используя переклю-чатели;
•	предусмотреть кнопку «Начать новую игру».
*/

//Домашнее задание

/*
Написать игру «Пятнашки», учитывая следующие требования :
•	предусмотреть автоматическую перестановку «пятнашек» в начале новой игры;
•	выводить время, за которое пользователь окончил игру(собрал «пят - нашки»);
•	предусмотреть возможность начать новую игру.
*/

int main()
{
    return 0;
}

