// 01.SynchronizeThreads2.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"

// Повторение пройденного материала
/*
1.	В каких случаях возникает необходимость синхронизации потоков?
2.	Какие существуют примитивы синхронизации?
3.	Что такое атомарный доступ?
4.	Какие преимущества имеют Interlocked-функции перед операторами C++? 
    В каких случаях желательно их применять?
5.	Что такое критическая секция?
6.	Какая функция служит для инициализации объекта критической секции?
7.	Какая функция позволяет потоку завладеть критической секцией?
8.	Посредством какой функции поток освобождает критическую секцию?
9.	Какая функция позволяет освободить ресурсы, используемые критической 
    секцией?
10.	Каким преимуществом обладает критическая секция?
11.	Какой недостаток у синхронизации в пользовательском режиме?
*/

// 1.	Мьютексы 

/*

Мьютекс(mutual exclusion – mutex) – это объект ядра, который гарантируют
потокам взаимоисключающий доступ к единственному ресурсу.

Мьютекс содержит следующие поля:
	•	счетчик числа пользователей;
	•	счетчик рекурсии;
	•	идентификатор потока-владельца.

Ммьютексы очень похожи на критические секции. Однако если критические 
секции являются объектами пользовательского режима, то мьютексы — это 
объекты ядра.

Поэтому они позволяют синхронизировать доступ к ресурсу не - скольких потоков из разных процессов.
Идентификатор потока - владельца определяет, какой поток за - хватил мьютекс, а счетчик рекурсий показывает, сколько раз это про - изошло.
Следует подчеркнуть, что мьютексы – это объекты ядра, наиболее часто используемые для синхронизации потоков.Как правило, с их по - мощью защищают блок памяти, к которому обращается множество пото - ков.Если бы потоки одновременно использовали какой - то блок памяти, то данные в нем были бы повреждены.Мьютексы гарантируют, что лю - бой поток получает монопольный доступ к блоку памяти, и тем самым обеспечивают целостность данных.
Для использования объекта - мьютекса один из потоков должен сначала  создать его вызовом функции API CreateMutex.


HANDLE  CreateMutex(
	LPSECURITY_ATTRIBUTES lpMutexAttributes, // атрибуты доступа 
	BOOL bInitialOwner, // флаг наличия потока-владельца 
	LPCTSTR pszName // имя объекта 
	);

*/
int main()
{
    return 0;
}

