// Lesson08.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"

//Повторение пройденного материала

/*
1)	Для чего обычно используют кнопочные элементы управления, 
    такие как Button, Check Box, Radio Button ?
2)	Какими способами можно создать кнопку на диалоге ?
3)	Какое сообщение приходит в диалоговую процедуру при воздействии на 
    элемент управления диалога (например, при нажатии на кнопку) ?
4)	Какая дополнительная информация приходит с сообщением WM_COMMAND ?
5)	Какое уведомление приходит диалогу при нажатии на кнопку ?
6)	Какая функция позволяет перевести фокус ввода на элемент управления ?
7)	Какая функция позволяет получить дескриптор окна (элемента управления), 
    обладающего фокусом ввода ?
8)	Как программным способом можно установить изображение на кнопке? 
    Какой стиль в этом случае необходимо задать кнопке?
9)	Какие существуют способы программной инициализации состояния элемента 
    управления Check Box ?
10)	Каким образом можно получить состояние флажка ?
11)	Какое свойство элемента управления Radio Button позволяет объединить в 
    группу несколько переключателей ?
12)	Какие существуют способы программной инициализации состояния переключателя ?
13)	Каким образом можно получить состояние переключателя ?
*/

//Элемент управления «текстовое поле ввода» (Edit Control)
/*
На практике применяются различные текстовые поля ввода в самом широком спектре: 
от небольшого однострочного поля ввода до многострочного элемента управления с 
автоматическим переносом строк, как в программе Microsoft Notepad. 

https://msdn.microsoft.com/en-us/library/windows/desktop/bb775456(v=vs.85).aspx

Создать текстовое поле ввода на форме диалога можно двумя способами:
•	с помощью средств  интегрированной среды разработки     
    Microsoft Visual Studio;
•	посредством вызова функции CreateWindow

	Класс EDIT

Стили Edit Controls
    
    ES_AUTOHSCROLL		автоматический горизонтальный скроллбар
    ES_AUTOVSCROLL		автоматический вертикальный скроллбар
    ES_LEFT				позиционирование текста по левому краю
    ES_CENTER			позиционирование текста по центру
    ES_RIGHT			позиционирование по правому краю
    ES_LOWERCASE		ввод строчными символами
    ES_MULTILINE		многострочный текст
    ES_NUMBER			ввод только цифр
    ES_PASSWORD			ввод пароля
    ES_READONLY			только для чтения
    ES_WANTRETURN		позволяет вводит символ новой строки для 
                        многострочного текста

https://msdn.microsoft.com/en-us/library/windows/desktop/bb775464(v=vs.85).aspx
*/

// Сообщения текстовых полей ввода

/* 
  Для выполнения различных операций по редактированию текста приложение 
  может отправлять следующие сообщения элементу управления Edit Control

  https://msdn.microsoft.com/en-us/library/windows/desktop/ff485923(v=vs.85).aspx
  ==============+============+===========+========================================================================
  Код сообщения	|	wParam	 |	lParam   |	Описание 
  ==============+============+===========+========================================================================
  EM_SETSEL		|	iStart	 |	iEnd	 |	Выделить текст, начиная с позиции iStart и заканчивая позицией iEnd 
  --------------+------------+-----------+------------------------------------------------------------------------
  EM_GETSEL		|	&iStart	 | 	&iEnd	 |	Получить начальное и конечное поло-жения текущего выделения 
  --------------+------------+-----------+------------------------------------------------------------------------
  EM_CANUNDO	|	0		 |	0		 |	Определить возможность отмены последнего действия
  --------------+------------+-----------+------------------------------------------------------------------------
 EM_GETLINECOUNT|	0		 |	0		 |	Получить число строк для многострочного окна редактирования
  --------------+------------+-----------+------------------------------------------------------------------------
  EM_LINELENGTH	|	iLine	 |	0		 |	Получить длину строки iLine
  --------------+------------+-----------+------------------------------------------------------------------------
  EM_GETLINE	|	iLine	 |	szBuffer |	Скопировать строку iLine в буфер szBuffer
  --------------+------------+-----------+------------------------------------------------------------------------
 EM_LINEFROMCHAR|	-1		 |	0		 |	Получить номер строки, в которой расположен курсор
  --------------+------------+-----------+------------------------------------------------------------------------
  EM_LINEINDEX	|	iLine	 |	0		 |	Получить номер первого символа строки iLine
  --------------+------------+-----------+------------------------------------------------------------------------
  WM_CLEAR		|	0		 |	0		 |	Удалить выделенный текст 
  --------------+------------+-----------+------------------------------------------------------------------------
  WM_CUT		|	0		 |	0		 |	Удалить выделенный текст и поместить его в буфер обмена 
  --------------+------------+-----------+------------------------------------------------------------------------
  WM_COPY		|	0		 |	0		 |	Скопировать выделенный текст в буфер обмена Windows 
  --------------+------------+-----------+------------------------------------------------------------------------
  WM_PASTE		|	0		 |	0		 |	Вставить текст из буфера обмена в месте, соответствующем позиции кусора  
  --------------+------------+-----------+------------------------------------------------------------------------
  WM_UNDO		|	0		 |	0		 |	Отменить последнее действие 
  --------------+------------+-----------+------------------------------------------------------------------------
  WM_GETTEXT	|	nMax	 |	szBuffer |	Скопировать текст (не более nMax символов) из элемента управления 
                |			 |			 |  в буфер szBuffer 
  --------------+------------+-----------+------------------------------------------------------------------------
*/

// Уведомления
/*
    При воздействии на элемент управления диалога (например, при вводе текста в Edit Control), 
    в диалоговую/оконную процедуру поступает сообщение WM_COMMAND, в котором LOWORD(wParam) 
    содержит идентификатор элемента управления, HIWORD(wParam) содержит код уведомления 
    (например, EN_CHANGE), а lParam – дескриптор элемента управления.

    Примеры уведомлений:

    EN_SETFOCUS		Окно получило фокус ввода
    EN_KILLFOCUS	Окно потеряло фокус ввода
    EN_UPDATE		Содержимое окна будет меняться
    EN_CHANGE		Содержимое окна изменилось
    EN ERRSPACE		Произошло переполнение буфера редактирования

    https://msdn.microsoft.com/en-us/library/windows/desktop/ff485924(v=vs.85).aspx
    
*/

// Макросы
/*
    https://msdn.microsoft.com/en-us/library/windows/desktop/ff485922(v=vs.85).aspx
*/

// Пользовательские сообщения.
/*
Допускается применять собственные сообщения.

Диапазоны целочисленных значений сообщений:
•	диапазон 0 – 0x03FF зарезервирован для системных сообщений 
    (например, #define WM_COMMAND  0x0111);
•	диапазон 0x0400 – 0x7FFF обычно используется для идентификаторов окон, 
    создаваемых программно (#define WM_USER  0x0400);
•	диапазон 0х8000 – 0xBFFF применяется для определения пользовательских сообщений 
    (#define WM_APP  0x8000);
•	диапазон 0xC000 – 0xFFFF предназначен для строковых сообщений (такие сообщения 
    используются при работе с немодальными диалогами и их необходимо регистрировать 
    с помощью функции API RegisterWindowMessage – об этом речь пойдёт в одном из 
    следующих занятий);
•	целочисленные значения, превышающие 0xFFFF, зарезервированы системой.
*/

// Получение дескриптора родительского окна
/*
    GetParent(HWND hWnd)
*/

// Задание текущих стилей элемента управления
/*
    LONG SetWindowLong(
        HWND hWnd, // дескриптор окна
        int nIndex, // индекс значения, которое нужно изменить
        LONG dwNewLong // новое значение
    );

    Индекс:
        GWL_EXSTYLE		Задает расширенный стиль окна.
        GWL_HINSTANCE	Задает новый дескриптор приложения.
        GWL_ID			Устанавливает новый идентификатор дочернего окна.
        GWL_STYLE		Устанавливает новый стиль окна.
        GWL_USERDATA	Устанавливает новые данный ассоциированные с окном.
        GWL_WNDPROC		Задает новую диалоговую процедуру

    https://msdn.microsoft.com/en-us/library/windows/desktop/ms633591%28v=vs.85%29.aspx
*/

// Получение текущего стиля окна
/*
    LONG GetWindowLong(
        HWND hWnd, // дескриптор окна
        int nIndex // индекс значения, которое нужно выбрать
    );
*/


// Переопределение оконной процедуры текстового поля
/*
        WNDPROC OriginalProc = NULL;
        OriginalProc = (WNDPROC)SetWindowLong(hEdit, GWL_WNDPROC, LONG(EditProc));
        LRESULT CALLBACK EditProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
        {
            ...
            // Вызов стандартного обработчика сообщений
            return CallWindowProc(OriginalProc, hWnd, message, wParam, lParam);
        }

где функция CallWindowProc передаёт все сообщения на обработку стандартной оконной 
процедуре:

    LRESULT CallWindowProc(
        WNDPROC lpPrevWndFunc,	// указатель на предыдущую (оригинальную) оконную                                                	// процедуру. Это значение возвращается функцией GetWindowLong.
        HWND hWnd,				// дескриптор окна, получающего сообщение
        UINT Msg,				// идентификатор сообщения
        WPARAM wParam,			// дополнительная информация о сообщении
        LPARAM lParam			// дополнительная информация о сообщении
    );
*/

// Есть ли в буффере обмена данные заданного формата
/*
    позволяет функция:

    BOOL IsClipboardFormatAvailable(
        UINT format // формат данных
    );

    где format:

    CF_TEXT			- текст
    CF_BITMAP		- изображение (bitmap)
    CF_UNICODETEXT	- unicode текст

    https://msdn.microsoft.com/en-us/library/windows/desktop/ff729168%28v=vs.85%29.aspx
*/

// Практическая часть
/*
   1. Написать приложение «Простейший калькулятор» на четыре действия(сложение, вычитание, умножение и деление).
      На форме диалога расположены три текстовых поля для ввода операндов и знака операции, кнопка, при нажатии 
      на которую, подсчитывается результат, а также статик для вывода результата вычисления.

   2. Написать приложение, которое по введенной дате определяет день недели. При этом день, месяц и год необходимо 
      вводить в отдельные текстовые поля. Результат также следует выводить в текстовое поле со стилем Read Only.
      Предусмотреть проверку корректности ввода даты.
*/

//Домашнее задание
/*
   Написать приложение,  определяющее, сколько осталось времени до указанной даты 
   (день, месяц и год вводятся в отдельные текстовые поля). Предусмотреть выдачу результата 
   в годах, месяцах, днях, и при необходимости, в часах, минутах, секундах (если установлен флажок).
*/



int main()
{
    return 0;
}

