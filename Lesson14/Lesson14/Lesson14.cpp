// Lesson14.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"

//Повторение пройденного материала
/*
1)	Зачем в приложении необходимо меню? 
	Что именно следует помещать в меню?
2)	Какие различают виды меню?
3)	Чем отличается пункт меню «команда» от пункта «подменю»?
4)	Что такое сепаратор? Для чего он используется?
5)	Что такое «горячие» клавиши в меню?
6)	Что означает троеточие в конце названия пункта меню? 
	Обязательно ли его указывать?
7)	В чем отличие между разрешенными, запрещенными и недоступными 
	пунктами меню?
8)	Каким образом можно присоединить меню к главному окну 
	приложения?
9)	Какие функции API позволяют получить дескриптор главного 
	меню и дескриптор подменю?
10)	Какое сообщение приходит в оконную процедуру главного окна 
	при выборе  пункта меню, определяющего команду?
11)	Какое сообщение приходит в оконную процедуру главного окна 
	непосредственно перед активизацией выпадающего меню?
12)	Какое сообщение операционная система отправляет главному 
	окну приложения при навигации по меню?
13)	Какая функция API применяется для изменения статуса пунктов 
	меню?
14)	Какая функция API позволяет установить или снять отметку на 
	пункте меню?
15)	В чем заключается удобство использования ресурса таблицы 
	строк?	
*/

// Динамическое создание меню
/*
Функция API CreateMenu предназначена для создания главного меню 
приложения:

	HMENU CreateMenu(VOID);

https://msdn.microsoft.com/ru-ru/library/windows/desktop/ms647624%28v=vs.85%29.aspx

Меню, созданное этой функцией, изначально будет пустым, т.е.не 
будет содержать ни одного пункта.

Заполнить меню пунктами можно с помощью функций API AppendMenu 
или InsertMenu.
*/

/*
Функция API CreatePopupMenu предназначена для создания 
всплывающего меню приложения:

	HMENU CreatePopupMenu(VOID);	

https://msdn.microsoft.com/ru-ru/library/windows/desktop/ms647626%28v=vs.85%29.aspx

Всплывающее меню, созданное этой функцией, также изначально 
будет пустым.

Заполнить меню пунктами можно  с  помощью  уже упомянутых функций
API AppendMenu или InsertMenu.
*/

/*
Функция API AppendMenu применяется для добавления пунктов в 
конец меню.

BOOL AppendMenu(
	HMENU hMenu, // дескриптор меню, к которому добавляется новый 
				 // пункт
	UINT uFlags, // внешний вид и правило поведения добавляемого 
				 // пункта меню
	UINT_PTR uIDNewItem, // идентификатор для нового пункта меню или
		 				 // дескриптор выпадающего меню
	LPCTSTR lpNewItem // содержимое нового пункта меню – зависит 
				// от второго 	 параметра
	);

https://msdn.microsoft.com/ru-ru/library/windows/desktop/ms647616%28v=vs.85%29.aspx

Второй параметр может иметь одно или несколько значений(флагов), 
приведенных ниже.

В последнем случае флаги объединяются с помощью побитовой 
операции «ИЛИ».

•	MF_POPUP – создает всплывающее меню.В этом случае третий 
				параметр функции содержит дескриптор всплывающего 
				меню.
•	MF_CHECKED – помещает отметку рядом с пунктом меню.
•	MF_DEFAULT – пункт меню установлен в качестве применяемого 
				 по умолчанию. Имя этого пункта выделяется 
				 жирным шрифтом. В этом случае при открытии 
				 подменю двойным щелчком мыши, Windows 
				 автоматически выполнит команду по умолчанию, 
				 закрыв при этом подменю.
•	MF_ENABLED – делает пункт меню доступным для выбора.
•	MF_DISABLED – делает пункт меню недоступным для выбора.
•	MF_GRAYED – выделяет серым цветом пункт меню и запрещает 
				его выбор.
•	MF_UNCHECKED – пункт меню не имеет отметки.
•	MF_SEPARATOR – указывает, что пункт меню является 
					разделителем(сепаратором).
•	MF_STRING – отображает пункт меню с использованием текстовой 
				строки, которая задается в четвертом параметре.
*/

/*
Функция API InsertMenu позволяет вставить новый пункт в меню.

BOOL InsertMenu(
	HMENU hMenu,	// дескриптор меню, которое модифицируется
	UINT uPosition, // идентификатор или позиция пункта меню, 
					// перед которым происходит вставка нового 
					// пункта
	UINT uFlags,	// интерпретация второго параметра, а также 
					// внешний вид и правило поведения нового 
					// пункта меню
	PTR uIDNewItem, // идентификатор для нового пункта меню или  
					// дескриптор выпадающего меню
	LPCTSTR lpNewItem // содержимое нового пункта меню – зависит 
					  // от третьего 	параметра
	);

https://msdn.microsoft.com/ru-ru/library/windows/desktop/ms647987%28v=vs.85%29.aspx
Второму параметру функции uPosition передается либо идентификатор 
пункта меню, либо позиция пункта меню.

Выбор варианта интерпретации задается в третьем параметре :
•	MF_BYCOMMAND – в этом случае второй параметр должен содержать 
					идентификатор пункта меню, перед которым 
					происходит вставка нового пункта;
•	MF_BYPOSITION – в этом случае второй параметр должен 
					содержать относительную позицию пункта меню 
					с отсчетом от нуля.
Кроме того, в третьем параметре можно дополнительно указать один 
или несколько  флагов, приведенных выше  при  рассмотрении 
функции AppendMenu.
*/

// Модификация меню
/*
Функция API ModifyMenu применяется для изменения существующего 
пункта меню.

BOOL ModifyMenu(
	HMENU hMenu, // дескриптор меню, которое модифицируется
	UINT uPosition, // идентификатор или позиция пункта меню, 
					// который будет изменен
	UINT uFlags, // интерпретация второго параметра, а также 
				 // внешний вид и правило поведения изменяемого 
				 // пункта меню
	PTR uIDNewItem, // идентификатор для изменяемого пункта меню 
					// или дескриптор выпадающего меню
	LPCTSTR lpNewItem // новое содержимое изменяемого пункта 
					 //меню – зависит от третьего параметра
	);

https://msdn.microsoft.com/ru-ru/library/windows/desktop/ms647993%28v=vs.85%29.aspx

Назначение параметров функции ModifyMenu аналогично функции 
InsertMenu.
*/

// Удаление пункта меню
/*
Функция API DeleteMenu применяется для удаления отдельного 
пункта из указанного меню.

BOOL DeleteMenu(
	HMENU hMenu,	// дескриптор меню, которое модифицируется
	UINT uPosition, // идентификатор или позиция пункта меню, 
					//который будет удален
	UINT uFlags		// интерпретация второго параметра
	);

https://msdn.microsoft.com/ru-ru/library/windows/desktop/ms647629%28v=vs.85%29.aspx

Следует отметить, что если удаляемым пунктом является выпадающее 
меню, то оно уничтожается и высвобождается память.

После вызова функций AppendMenu, InsertMenu или DeleteMenu 
с целью модификации главного меню следует обязательно вызвать 
функцию API DrawMenuBar для повторного отображения изменившейся 
полосы меню.
*/

// Уничтожение меню
/*
Функция API DestroyMenu предназначена для уничтожения меню и 
высвобождения памяти, занимаемой меню.

BOOL DestroyMenu(
	HMENU hMenu // дескриптор уничтожаемого меню
	);

https://msdn.microsoft.com/ru-ru/library/windows/desktop/ms647631%28v=vs.85%29.aspx
*/

// Получение текста пункта меню
/*
Функция GetMenuString получает строку текста указанного 
пункта меню.

int GetMenuString(
	HMENU hMenu,	// дескриптор меню
	UINT uIDItem,	// идентификатор или позиция пункта меню, 
					// текст которого необходимо получить
	LPTSTR lpString,// указатель на строковый буфер, в который 
					// будет записана строка текста
	int nMaxCount,	// максимальное число символов, которое 
					// должно быть записано в буфер
	UINT uFlag		// интерпретация второго параметра
	);

https://msdn.microsoft.com/ru-ru/library/windows/desktop/ms647983%28v=vs.85%29.aspx
*/

// Практическая часть
/*
1.	Написать приложение, которое отображает увеличивающийся 
	каждую секунду счетчик. Запуск счетчика осуществляется при 
	помощи пункта меню «Счетчик | Старт», а остановка при помощи 
	пункта меню «Счетчик | Стоп».
	При этом меню создается динамически. Необходимо предусмотреть,
	чтобы нельзя было выбрать пункт меню «Счетчик | Старт», 
	если счетчик уже запущен, а пункт меню «Счетчик | Стоп», 
	если счетчик еще не запущен.
2.	Реализовать второй вариант счетчика. Вместо двух пунктов меню
	«Счетчик | Старт» и «Счетчик | Стоп» присутствует только один.
	Если счетчик еще не запущен, то он называется 
	«Счетчик | Старт», а если уже запущен, то «Счетчик | Стоп».
*/

int main()
{
    return 0;
}

