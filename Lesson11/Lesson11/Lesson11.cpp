// Lesson11.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"


// Повторение пройденного материала
/*
1)	Что такое распаковщики сообщений? 
    Какими преимуществами они обладают?
2)	В чем состоит главное отличие общих элементов управления 
    от базовых элементов управления?
3)	Для чего применяется элемент управления Progress Control?
4)	Какое сообщение необходимо отправить индикатору, чтобы 
    установить ему интервал(нижнюю и верхнюю границу)?
5)	Какие макросы позволяют упаковать дополнительную информацию 
    в параметры WPARAM и LPARAM?
6)	С помощью какого сообщения можно установить шаг приращения для индикатора?
7)	Какими способами можно изменить текущее состояние индикатора?
8)	Как установить цвет фона индикатора?
9)	Как установить цвет самого индикатора(цвет заполняемых прямоугольников)?
10)	Как программно создать Progress Control?
*/

// Общий элемент управления «регулятор» (Slider Control)
/*
    Элемент управления Slider Control (ползунок или регулятор), который ранее 
    назывался Trackbar, представляет собой окно с линейкой и перемещаемым по ней ползунком.

    https://msdn.microsoft.com/en-us/library/windows/desktop/bb760149%28v=vs.85%29.aspx

    Класс окна: TRACKBAR_CLASS (заголовочный файл CommCtrl.h)

    Стили окна: https://msdn.microsoft.com/en-us/library/windows/desktop/bb760147(v=vs.85).aspx

    =============   =====================================================================
    Стиль			Описание
    =============   =====================================================================
    TBS_HORZ		Линейка имеет горизонтальную ориентацию (стиль по умолчанию)
    TBS_VERT		Линейка имеет вертикальную ориентацию
    TBS_AUTOTICKS	Линейка имеет метки для всех значений в заданном диапазоне значений. 
                    Без этого стиля линейка может иметь метки только для начального и 
                    конечного положений ползунка
    TBS_NOTICKS		Стиль исключает отображение каких-либо меток, в том числе и для 
                    начального и конечного положений ползунка
    TBS_RIGHT		Элемент отображает метки справа (снизу) от линейки (стиль   
                    используется по умолчанию)
    TBS_LEFT		Элемент отображает метки слева (сверху) от линейки
    TBS_BOTH		Элемент отображает метки с обеих сторон
    TBS_TOOLTIPS	Поддерживается всплывающая подсказка, отображающая текущую  позицию 
                    ползунка

    Пример создания окна:

        HWND hSlider = CreateWindowEx(0, TRACKBAR_CLASS, NULL, 
                                      WS_CHILD | WS_VISIBLE,
                                      LEFT, TOP, WIDTH, HEIGHT, hwndParent, NULL, 						
                                      GetModuleHandle(NULL), NULL);
*/

// Сообщения регулятора
/*
Все сообщения: https://msdn.microsoft.com/en-us/library/windows/desktop/ff486075%28v=vs.85%29.aspx

================ ============ =============== ======================================
Код сообщения		wParam		lParam			Описание
================ ============ =============== ======================================
TBM_GETPOS			0			0				Возвращает текущую позицию ползунка
---------------- ------------ --------------- --------------------------------------
TBM_SETPOS			fRedraw		newPos			Устанавливает новую позицию ползунка.
                                                Если fRedraw равно TRUE, регулятор 
                                                перерисовывается после этого.
---------------- ------------ --------------- --------------------------------------
TBM_SETRANGE		fRedraw		MAKELPARAM
                                (wMin, wMax)	Устанавливает диапазон регулятора
---------------- ------------ --------------- --------------------------------------
TBM_SETTICFREQ		wFreq		0				Устанавливает шаг меток
---------------- ------------ --------------- --------------------------------------
TBM_SETLINESIZE		0			nLineSize		Устанавливает размер «строки»
---------------- ------------ --------------- --------------------------------------
TBM_SETPAGESIZE		0			nPageSize		Устанавливает размер «страницы»
================ ============ =============== ======================================
*/

/*
    Ползунок уведомляет свое родительское окно (диалог) о действиях пользователя, 
    посылая сообщение WM_HSCROLL или WM_VSCROLL — в зависимости от ориентации 
    элемента управления (Horizontal или Vertical). 
    В младшем слове параметра wParam содержится код уведомления, а параметр 
    lParam содержит дескриптор ползунка.

    =================   ==============================================================
    Код уведомления		Интерпретация
    =================   ==============================================================
    TB_LINEUP			Нажата клавиша «стрелка влево» (VK_LEFT) или клавиша 
                        «стрелка вверх» (VK_UP)
    TB_LINEDOWN			Нажата клавиша «стрелка вправо» (VK_RIGHT) или  клавиша 
                        «стрелка вниз» (VK_DOWN)
    TB_PAGEUP			Нажата клавиша «Page Up» (VK_PRIOR) или щелчок мышью на  
                        линейке левее или выше ползунка
    ТВ_PAGEDOWN 		Нажата клавиша «Page Down» (VK_NEXT) или щелчок мышью на 
                        линейке правее или ниже ползунка
    TB_THUMBPOSITION	Отпущена кнопка мыши после перемещения ползунка (это    
                        сообщение следует всегда после сообщения TB_THUMBTRACK)
    TB_THUMBTRACK		Ползунок перемещается с помощью мыши
    ТВ_ТОР				Нажата клавиша «Home» (VK_HOME) — ползунок устанавливается в 
                        крайнее левое (верхнее) положение, соответствующее значению wMin
    ТВ_ВОТТОМ			Нажата клавиша «End» (VK_END) — ползунок  устанавливается в 
                        крайнее правое (нижнее) положение, соответствующее значению wMax
    =================   ==============================================================

    Для кодов TB_THUMBPOSITION и TB_THUMBTRACK старшее слово параметра wParam содержит
    позицию ползунка.
*/

// Общий элемент управления «счётчик» (Spin Control)
/*
    Элемент управления Spin Control (счётчик) реализован как две кнопки со стрелками, 
    с помощью которых можно увеличивать, или уменьшать некоторое числовое значение. 
    Значение, связанное со счётчиком, называется его текущей позицией.

    https://msdn.microsoft.com/en-us/library/windows/desktop/bb759889%28v=vs.85%29.aspx

    Cчётчик можно ассоциировать с другим элементом управления, называемым 
    приятельским окном (buddy window). 

    Чаще всего таким окном является текстовое поле. Комбинацию счётчика с 
    текстовым полем называют также полем с прокруткой. Поле с прокруткой 
    воспринимается пользователем как единый элемент управления. Содержимое 
    текстового поля  в таком элементе отображает текущую позицию счётчика.
*/

// Создание счетчика
/*
    Счётчик можно создать несколькими способами :

•	при помощи редактора диалоговых окон на этапе визуального проектирования формы диалога;

•	посредством вызова функции CreateWindowEx;

    HWND hSpin = CreateWindowEx(0, UPDOWN_CLASS, NULL, WS_CHILD | WS_VISIBLE,
                                LEFT, TOP, WIDTH, HEIGHT, hwndParent, NULL,
                                GetModuleHandle(NULL), NULL);
    =============== =======================================================
    Стиль			Описание
    =============== =======================================================
    UDS_HORZ		Указывает на горизонтальную ориентацию счетчика 
                    (при отсутствии данного стиля ориентация вертикальная).
    UDS_WRAP		Задает циклический переход от верхней границы к нижней (и
                    наоборот) при достижении максимального значения верхней 
                    (нижней) границы.
    UDS_ARROWKEYS	Разрешает использование клавиш управления курсором для 
                    изменения значения счетчика.
    UDS_SETBUDDYINT	Указывает, что при изменении значения счетчика необходимо
                    изменить значение «приятеля».
    UDS_NOTHOUSANDS	Снимает разделитель между тысячами, к примеру, 1000000 или
                    1 000 000.
    UDS_AUTOBUDDY	Позволяет автоматически выбирать «приятеля» из существующего
                    списка окон.
    UDS_ALIGNRIGHT	Счётчик будет находиться справа от «приятеля».
    UDS_ALIGNLEFT	Счетчик будет находиться слева от «приятеля».
    =============== =======================================================

•	посредством вызова функции CreateUpDownControl.	
    https://msdn.microsoft.com/en-us/library/windows/desktop/bb759977%28v=vs.85%29.aspx

    HWND CreateUpDownControl(
        DWORD dwStyle, // стили элемента управления
        int x, // клиентская координата X левого верхнего угла
        int y, // клиентская координата Y левого верхнего угла
        int cx, // ширина элемента управления
        int cy, // высота элемента управления
        HWND hParent, // дескриптор родительского окна
        int nID, // идентификатор элемента управления
        HINSTANCE hInst, // дескриптор приложения
        HWND hBuddy, // дескриптор «приятеля»
        int nUpper, // верхняя граница
        int nLower, // нижняя граница
        int nPos // текущая позиция
    );

*/

// Сообщения счётчика
/*
==============  ======= =============== ==================================================
Код сообщения	wParam	lParam			Описание
==============  ======= =============== ==================================================
UDM_GETPOS32	0		(LPBOOL)		Возвращает текущую позицию счетчика. 
                        pfError			pfError — указатель на булеву переменную, 
                                        которая получает значение FALSE, если 
                                        значение успешно получено, и TRUE — в случае 
                                        ошибки.
-------------- -------- --------------- --------------------------------------------------
UDM_SETPOS32	0		nPos			Устанавливает новую позицию счетчика.
-------------- -------- --------------- --------------------------------------------------
UDM_SETBASE		nBase	0				Устанавливает систему счисления    (десятичную или 
                                        шестнадцатеричную).
-------------- -------- --------------- --------------------------------------------------
UDM_SETRANGE32	iLow	iHigh			Устанавливает минимальную и максимальную позиции 
                                        для счетчика.
-------------- -------- --------------- --------------------------------------------------
UDM_SETACCEL	nAccels	(LPUDACCEL) 	Устанавливает правило, по которому  будет 
                        pAccels			осуществляться приращение счетчика. 
                                        Параметр nAccels - задает количество структур,
                                        участвующих в определении правила, из массива 
                                        pAccels.
-------------- -------- --------------- --------------------------------------------------
UDM_GETACCEL	nAccels	(LPUDACCEL) 	Позволяет узнать информацию о приращениях 
                        pAccels			счетчика. Параметр nAccels -  запрашиваемое 
                                        количество структур, pAccels - указатель на 
                                        массив структур для получения информации о 
                                        приращениях счетчика. Возвращаемое значение - 
                                        реальное количество полученных структур типа 
                                        UDACCEL.
-------------- -------- --------------- --------------------------------------------------
UDM_SETBUDDY	(HWND)	hwndBuddy	0	Устанавливает «приятеля» для счетчика.
==============  ======= =============== ==================================================
https://msdn.microsoft.com/en-us/library/windows/desktop/ff486114%28v=vs.85%29.aspx

При нажатии одной из стрелок Spin Control посылает своему  родительскому окну сообщение 
WM_VSCROLL или WM_HSCROLL (в зависимости от ориентации счётчика), в котором младшее 
слово параметра wParam содержит код SB_THUMBPOSITION.  
Кроме того, счетчик посылает уведомляющее сообщение UDN_DELTAPOS  в форме сообщения 
WM_NOTIFY.

При непосредственном клавиатурном вводе нового числа в «приятельское окно» элемент Edit 
Control посылает диалогу сообщение WM_COMMAND с кодом уведомления EN_CHANGE. 

Для немедленной реакции приложения на изменившуюся текущую позицию счётчика следует 
предусмотреть обработку этого сообщения.
*/


int main()
{
    return 0;
}

