// Lesson12.cpp: определяет точку входа для консольного приложения.
//

#include "stdafx.h"

// Повторение пройденного материала
/*
1)	Для чего применяется элемент управления Slider Control?
2)	Каким образом можно установить диапазон ползунка (нижнюю и верхнюю границу)?
3)	С помощью какого сообщения можно получить текущую позицию ползунка?
4)	С помощью какого сообщения можно установить новую позицию ползунка?
5)	Каким сообщением ползунок уведомляет родительское окно (диалог) 
    о действиях пользователя?
6)	Как программно создать Slider Control?
7)	Какие два элемента управления образуют поле с прокруткой?
8)	Каким образом можно установить минимальную и максимальную позиции счётчика?
9)	С помощью какого сообщения можно получить текущую позицию счётчика?
10)	С помощью какого сообщения можно установить новую позицию счётчика?
11)	Как установить «приятеля» для счётчика?
12)	С помощью какого сообщения можно установить правило, по которому  будет 
    осуществляться приращение счетчика?
13)	Какое сообщение Spin Control посылает своему  родительскому окну при 
    нажатии одной из стрелок? Какая дополнительная информация приходит с этим сообщением?
14)	Каким образом можно программно создать Spin Control?
*/

// Общий элемент управления «строка состояния» (Status Bar)
/*
    Строка состояния (Status Bar) — это окно, обычно располагающееся в нижней 
    части главного окна приложения, которое предназначено для вывода информации 
    о текущем состоянии программы, о выполняемых операциях и режимах. 

    https://msdn.microsoft.com/en-us/library/windows/desktop/bb760728(v=vs.85).aspx
*/

// Создание строки состояния
/*
С помощью функции CreateWindow(Ex). 
Имя  предопределенного  оконного  класса –  STATUSCLASSNAME.

HWND hStatusBar = CreateWindowEx( 0, STATUSCLASSNAME, 0, 
    WS_CHILD | WS_VISIBLE | SBT_TOOLTIPS | CCS_BOTTOM | SBARS_SIZEGRIP,
    0, 0, 0, 0, hDialog, HMENU(WM_USER), GetModuleHandle(NULL), 0);
*/
/*
Можно воспользоваться функцией API CreateStatusWindow:

HWND CreateStatusWindow(          
    LONG style,			// стили для строки состояния
    LPCTSTR lpszText,	// указатель на строку, содержащую текст для первой 	
                        // секции строки состояния
    HWND hwndParent,	// дескриптор родительского окна
    UINT wID			// идентификатор строки состояния
);
*/

// Стили
/*
Стили для общих элементов управления:
    https://msdn.microsoft.com/en-us/library/windows/desktop/bb775498(v=vs.85).aspx

Стили для строк состояния:
    https://msdn.microsoft.com/en-us/library/windows/desktop/bb760730(v=vs.85).aspx

    Некоторые стили:

    CCS_BOTTOM		элемент управления располагается внизу клиентской области 
                    родительского окна и имеет ширину, равную ширине родительского окна.  
                
    SBARS_SIZEGRIP	задает наличие  «манипулятора размера» в правом углу строки состояния. 
                    Этот декоративный элемент  создает область, за которую можно ухватиться 
                    при изменении размера окна  приложения.

    SBARS_TOOLTIPS	позволит включить режим всплывающих подсказок для строки состояния. 
                    Подсказка появляется в одном из двух случаев: 
                        •	в секции присутствует только иконка;
                        •	текст полностью не помещается в секции.
*/


/*
Строка состояния может работать в одном из двух режимов: в стандартном режиме либо в простом режиме.

При работе в стандартном режиме строка состояния разбивается на несколько секций, 
в каждую из которых выводится отдельная строка текста или иконка. 

При работе в простом режиме строка состояния реализована как единый элемент и отображает 
только одну секцию. 
*/

// Сообщения строки состояния
/*
Все сообщения
    https://msdn.microsoft.com/en-us/library/windows/desktop/ff486035(v=vs.85).aspx
*/

// Переключение режимов
/*
Переключение между режимами осуществляется посылкой сообщения SB_SIMPLE строке состояния. 
При этом если в wParam указывается значение TRUE, то устанавливается простой режим, 
в противном случае устанавливается стандартный режим.
*/

// Добавление секций
/*
Если строка состояния используется в стандартном режиме, то её необходимо разделить 
на отдельные секции при помощи сообщения SB_SETPARTS. 

При отправке этого сообщения в wParam указывается количество секций строки состояния, 
а в lParam указывается адрес целочисленного массива, каждый элемент которого 
определяет позицию (в клиентских координатах) правой границы соответствующей секции. 

Если элемент массива равен -1, то границей соответствующей секции считается правая 
граница строки состояния.
*/

// Отображение текста
/*
Для отображения текста  в строке состояния, ей посылается сооб-щение SB_SETTEXT. 
С этим сообщением в wParam передаётся номер секции в строке состояния (отсчёт ведётся с нуля)
и графический стиль секции, а в lParam – указатель на строку, содержащую текст.

Графические стили секции могут иметь одно из следующих значений:
===========================  ===================================================	
        Стиль								Описание
===========================  ===================================================
О (значение по умолчанию)		Секция рисуется с вдавленной рамкой
SBT_NOBORDERS					Секция рисуется без рамки
SBT_POPOUT						Секция рисуется с выпуклой рамкой
SBT_OWNERDRAW					За прорисовку секции отвечает родительское окно
===========================  ===================================================
*/

// Отображение элемента управления
/*
Обычно в каждую секцию строки состояния выводится отдельное текстовое сообщение. 
Однако можно разместить в секции элемент управления, например индикатор процесса. 
При таком размещении необходимо знать клиентские координаты этой секции, которые 
могут быть получены при  помощи отправки сообщения SB_GETRECT. 

При посылке этого сообщения в wParam указывается номер секции в строке состояния, 
а в lParam – адрес структуры типа RECT,  принимающей координаты секции.

Следующий фрагмент кода демонстрирует размещение индикатора в строке состояния:

RECT r;
SendMessage(hStatus, SB_GETRECT, 1, (LPARAM)&r); 

hProgressBar = CreateWindowEx(0, PROGRESS_CLASS, NULL, WS_CHILD | WS_VISIBLE,
                                r.left + 3, r.top + 3, r.right - r.left, r.bottom - r.top, 
                                hStatusBar, NULL, GetModuleHandle(NULL), NULL);

*/

// Другие сообщения
/*
===============  ============  ===============  ===========================================
Код сообщения		wParam		lParam				Описание
===============  ============  ===============  ===========================================
SB_SETTIPTEXT		iPart		(LPCTSTR)			Устанавливает текст всплывающей 
                                lpszTooltip			подсказки для заданной секции
---------------  ------------  ---------------  -------------------------------------------
SB_SETICON			iPart		(HICON)				Устанавливает иконку  на заданную секцию
                                hIcon				
---------------  ------------  ---------------  -------------------------------------------
SB_SETBKCOLOR		0			(COLORREF)			Устанавливает цвет фона для строки 
                                clrBk				состояния
---------------  ------------  ---------------  -------------------------------------------													
SB_GETTEXT			iPart		(LPSTR)				Получает текст из выбранной секции
                                szText	
===============  ============  ===============  ===========================================
*/

int main(int argc, char* argv[])
{
    return 0;
}

