// Lesson13.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"

// Повторение пройденного материала

/*
1)	Для чего предназначена строка состояния?
2)	Какие функции API позволяют создать строку состояния?
3)	Чем отличается стандартный режим работы строки состояния от 
    простого режима?
4)	Какое сообщение необходимо отправить строке состояния для 
    установки заданного режима работы?
5)	С помощью какого сообщения можно разделить строку состояния 
    на отдельные секции ?
6)	Каким образом можно отобразить текст в строке состояния?
7)	С помощью какого сообщения можно получить клиентские координаты 
    секции строки состояния?
8)	Как установить текст всплывающей подсказки для заданной секции?
9)	Как установить иконку на заданную секцию?
10)	С помощью какого сообщения можно установить цвет фона 
    строки состояния?
*/

// Меню
/*
Меню представляет собой список команд, позволяющих выполнить 
любую операцию, реализованную приложением. 

Различают следующие виды меню:
•	главное меню;
•	системное меню;
•	контекстное меню.

https://msdn.microsoft.com/en-us/library/windows/desktop/ms647553(v=vs.85).aspx
*/

// Типы и состояния пунктов меню
/*
Различают два типа пунктов меню:

•	пункт меню «команда»;
•	пункт меню «подменю»

Пункт меню «команда» — это конечный пункт на иерархическом дереве меню. 
При выборе такого пункта меню обычно выполняется некоторое действие. 
При этом в программном коде пункту меню «команда» назначается 
уникальный целочисленный идентификатор.

Пункт меню «подменю» — это заголовок выпадающего меню более низкого уровня.

Сепаратор – это элемент меню, который  представляет собою 
горизонтальную разделительную линию.

Пункты меню могут быть разрешенными (enabled), запрещенными (disabled) и 
недоступными (grayed). 

По умолчанию пункт меню является разрешенным. 
Когда выбирается такой пункт, система посылает оконной процедуре сообщение
WM_COMMAND или отображает  соответствующее подменю, в зависимости от 
типа пункта.

Запрещенный и недоступный пункты с точки зрения поведения одинаковы. 
Их можно выделить, но нельзя выбрать, т.е. при щелчке мышью или при 
нажатии клавиши <Enter> ничего не происходит. 

Различаются запрещенный и недоступный пункты только внешним видом. 
Запрещенный пункт выглядит точно так же, как разрешенный, 
а недоступный пункт меню отображается серым цветом.

Рекомендуется делать недоступными те пункты меню, использование 
которых в данный момент бессмысленно или даже небезопасно с точки 
зрения устойчивости работы приложения.

Иногда пункт меню может использоваться в роли флажка (check box). 
Флажок может быть установлен или сброшен. При этом переход из одного 
состояния в другое происходит при каждом выборе пункта меню.

Пункты меню могут использоваться также в роли переключателей (radio button).
Переключатели, как и флажки, обычно используются в группе. В  отличие 
от флажков, переключатели связываются только с взаимоисключающими опциями, 
поэтому в группе можно выбрать только один переключатель.
*/

// Создание меню
/*
С помощью средств Microsoft Visual Studio

Включение меню в приложение требует следующих шагов:
    •	определение шаблона меню в файле описания ресурсов;
    •	загрузка меню при создании главного окна;
    •	обработка событий меню.
*/

// Программный  способ  присоединения меню  к  главному  окну  приложения
/*
Загрузка меню из ресурса:

HMENU LoadMenu(          
    HINSTANCE hInstance, // дескриптор приложения
    LPCTSTR lpMenuName // указатель на строку, содержащую имя меню в ресурсах
);

https://msdn.microsoft.com/en-us/library/windows/desktop/ms647990(v=vs.85).aspx

После загрузки меню, его необходимо установить с помощью функции API SetMenu:

BOOL SetMenu(          
    HWND hWnd,	// дескриптор окна, к которому присоединяется меню
    HMENU hMenu // дескриптор меню
);

https://msdn.microsoft.com/en-us/library/windows/desktop/ms647995(v=vs.85).aspx
*/

// Получение дескриптора главного меню/подменю
/*
Для получения дескриптора главного меню служит функция API GetMenu.

HMENU GetMenu(
    HWND hWnd	// дескриптор главного окна приложения
);

https://msdn.microsoft.com/en-us/library/windows/desktop/ms647640(v=vs.85).aspx

Для  получения  дескриптора  подменю  служит  функция API GetSubMenu.

HMENU GetSubMenu ( 
    HMENU hMenu,	// дескриптор родительского меню 
    int nPos		// позиция пункта-подменю в родительском меню 
);

https://msdn.microsoft.com/en-us/library/windows/desktop/ms647984(v=vs.85).aspx
*/

// Обработка сообщений меню
/*
Операционная система  Windows посылает сообщение WM_COMMAND при каждом выборе 
пункта меню, определяющего команду.  

При этом LOWORD(wParam) содержит идентификатор пункта меню, 
а HIWORD(wParam) и lParam содержат нулевые значения. 

При выборе пунктов системного меню вместо указанного сообщения отправляется 
сообщение WM_SYSCOMMAND. 

https://msdn.microsoft.com/en-us/library/windows/desktop/ms646360(v=vs.85).aspx

Иногда в программе может потребоваться обработка сообщений WM_INITMENU и 
WM_INITMENUPOPUP. Они отправляются непосредственно перед активизацией 
главного меню или выпадающего меню. 

Эти сообщения позволяют приложению изменить меню перед тем, как оно будет 
отображено на экране. 

При навигации по меню система отправляет также сообщение WM_MENUSELECT.

https://msdn.microsoft.com/en-us/library/windows/desktop/ms646352(v=vs.85).aspx

Оно более универсально по сравнению с WM_COMMAND, так как инициируется 
даже тогда, когда выделен недоступный или запрещенный пункт меню. 

Это сообщение может использоваться для формирования контекстной справки меню, 
которая отображается в строке состояния приложения.
*/

// Изменение состояния пунктов меню
/*
Для изменения статуса пунктов меню применяется функция API EnableMenuItem.

BOOL EnableMenuItem(
    HMENU hMenu,		// дескриптор меню
    UINT uIDEnableItem, // идентификатор или позиция пункта меню
    UINT uEnable		// интерпретация второго параметра и выполняемое действие
);

https://msdn.microsoft.com/en-us/library/windows/desktop/ms647636(v=vs.85).aspx

Третий параметр uEnable задается как побитовая операция объединения двух флагов. 

Первый флаг может содержать одно из следующих значений: 
    •	MF_BYCOMMAND – в этом случае второй параметр должен содержать идентификатор 
        пункта меню;
    •	MF_BYPOSITION – в этом случае второй параметр должен содержать относительную 
        позицию пункта меню с отсчетом от нуля. 

Второй флаг может принимать одно из следующих значений: 
    •	MF_ENABLED – пункт меню разрешён;
    •	MF_DISABLED – пункт меню запрещён;
    •	MF_GRAYED – пункт меню недоступен.

Если в результате применения функции изменяется статус пункта главного меню, 
то следует обязательно вызвать функцию API DrawMenuBar для повторного 
отображения изменившейся полосы меню.

BOOL DrawMenuBar(
          HWND hWnd // дескриптор главного окна приложения
);

https://msdn.microsoft.com/en-us/library/windows/desktop/ms647633(v=vs.85).aspx
*/

/*
Для установки или снятия отметки на пункте меню:

DWORD CheckMenuItem(
    HMENU hMenu,		// дескриптор меню
    UINT uIDCheckItem,	// идентификатор или позиция пункта меню
    UINT uCheck			// интерпретация второго параметра и выполняемое действие
);

https://msdn.microsoft.com/en-us/library/windows/desktop/ms647619(v=vs.85).aspx

Второму параметру функции uIDCheckltem передается либо идентификатор пункта меню, 
либо позиция пункта меню. Выбор варианта интерпретации задается в третьем параметре. 

Третий параметр uCheck задается как побитовая операция объединения двух флагов. 
Первый флаг может содержать одно из следующих значений: 
    •	MF_BYCOMMAND – в этом случае второй параметр должен содержать идентификатор 
        пункта меню;
    •	MF_BYPOSITION – в этом случае второй параметр uIDCheckltem должен содержать 
        относительную позицию пункта меню с отсчетом от нуля. 

Второй флаг может принимать одно из следующих значений: 
    •	MF_CHECKED - поместить отметку слева от имени пункта меню;
    •	MF_UNCHECKED - снять отметку слева от имени пункта меню.

В функциях CheckMenuItem и EnableMenuItem следует рекомендуется использование флага 
MF_BYCOMMAND

Другие функции меню:

https://msdn.microsoft.com/en-us/library/windows/desktop/ff468865(v=vs.85).aspx
*/

// Ресурс таблицы строк. 
/* 
Таблица строк представляет собой список строк, связанных с уникальными  
целочисленными идентификаторами. 

Для загрузки строки из ресурса таблицы строк предназначена функция API LoadString.

int LoadString( 
    HINSTANCE hInstance,	// дескриптор приложения, содержащего таблицу строк
    UINT uID,				// идентификатор строки, которая должна быть загружена
    LPTSTR lpBuffer,		// указатель на буфер, в который будет записана строка
    int nBufferMax			// размер буфера
);
https://msdn.microsoft.com/ru-ru/library/windows/desktop/ms647486(v=vs.85).aspx
*/

int main()
{
    return 0;
}

