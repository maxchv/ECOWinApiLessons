// Lesson16.cpp: определяет точку входа для консольного приложения.
//

#include "stdafx.h"

// Повторение пройденного материала
/*
1.	Что такое контекстное меню?
2.	При каком событии в оконную процедуру приходит 
    сообщение WM_CONTEXTMENU?
3.	Какая функция API позволяет отобразить контекстное 
    меню?
4.	Что такое акселераторы?
5.	Как добавлять акселераторы к проекту?
6.	Какая функция API позволяет загрузить в память 
    приложения таблицу акселераторов?
7.	С какой целью в приложении используется функция 
    API TranslateAccelerator?
*/

// Дополнительные модальные диалоги
/*
Обычно дополнительные диалоговые окна предназначены для 
задания определённых настроек приложения.
Чаще всего дополнительные диалоги вызываются при выборе 
пунктов меню, у которых в конце названия стоит троеточие.

Ярким примером дополнительного диалогового окна является  
диалог  «Property Pages»  для  указания  настроек  проекта  
в  среде  Microsoft Visual Studio.

Другими примерами дополнительных диалогов могут служить диалоги
«Открыть», «Сохранить как», «Шрифт» приложения «Блокнот».
*/

// Коммуникация между окнами
/*
Диалоговые окна бывают модальными и немодальными. 

Наиболее часто используются модальные диалоговые окна. 
Это означает, что приложение дожидается завершения диалога и 
только затем его выполнение будет продолжено. 
При этом модальный диалог до своего завершения не позволяет 
пользователю работать с другими окнами этого же приложения, 
однако разрешает переключаться на работу с другими приложениями.

Для создания и отображения дополнительного модального диалогового 
окна требуется выполнить следующие действия:
•	определить диалог в файле описания ресурсов;
•	определить в приложении диалоговую процедуру,  
    обеспечивающую обработку сообщений для дополнительного 
    диалогового окна;
•	вызвать функцию API DialogBox  для отображения модального 
    диалога.

Следует выделить два способа передачи данных дополнительному 
диалоговому окну:
    •	передача данных через public-метод класса
        дополнительного  диалога;
    •	передача данных через параметрический конструктор 
        класса дополнительного  диалога.

Следует отметить два способа передачи данных главному 
диалоговому окну:
    •	передача данных через public-метод класса   
        дополнительного  диалога;
    •	непосредственное обращение к главному окну приложения.
        
Второй вариант предполагает получение дескриптора главного окна 
приложения с помощью функции API GetParent

HWND GetParent(          
     HWND hWnd // дескриптор дочернего окна
);
*/

// Стандартные диалоги «Открыть» и «Сохранить как»
/*
Общие стандартные диалоги
https://msdn.microsoft.com/en-us/library/windows/desktop/ff468806%28v=vs.85%29.aspx

Диалогои открыть, закрыть
https://msdn.microsoft.com/en-us/library/windows/desktop/ms646960%28v=vs.85%29.aspx

Стандартный диалог «Открыть» предоставляет пользователю 
возможность выбора файла или группы файлов для открытия. 
Для создания и отображения модального диалога «Открыть» 
предназначена функция API GetOpenFileName.

BOOL GetOpenFileName(
    LPOPENFILENAME lpofn // указатель на структуру OPENFILENAME, 
                         // которая содержит информацию, 
                         // используемую для инициализации диалога
);
https://msdn.microsoft.com/en-us/library/windows/desktop/ms646927%28v=vs.85%29.aspx

Пример:
https://msdn.microsoft.com/en-us/library/windows/desktop/ms646829%28v=vs.85%29.aspx#open_file

Данная функция вернет ненулевое значение, если при выборе файла 
будет нажата кнопка OK (Открыть).

Стандартный диалог «Сохранить как» предоставляет пользова-телю возможность выбора файла для сохранения. Для создания и отоб-ражения модального диалога «Сохранить как» предназначена функ-ция API GetSaveFileName.

BOOL GetSaveFileName(
    LPOPENFILENAME lpofn // указатель на структуру OPENFILENAME,
                         // которая содержит информацию, 
                         // используемую для инициализации диалога
);
https://msdn.microsoft.com/en-us/library/windows/desktop/ms646928%28v=vs.85%29.aspx

Данная функция вернет ненулевое значение, если при выборе файла 
будет нажата кнопка OK (Сохранить).
*/

// Структура OPENFILENAME
/*
Обе вышеописанные функции в качестве параметра принимают 
указатель на структуру OPENFILENAME, которая содержит 
информацию, используемую для инициализации диалога.
https://msdn.microsoft.com/en-us/library/windows/desktop/ms646839%28v=vs.85%29.aspx

typedef struct tagOFN {
    DWORD         lStructSize;		// размер структуры в байтах
    HWND          hwndOwner;		// дескриптор окна, которое владеет 
                                    // диалогом
    HINSTANCE     hInstance;		// дескриптор приложения, если 
                                    // установлен флаг   
                                    // OFN_ENABLETEMPLATE, либо дескриптор 
                                    // объекта памяти, содержащего шаблон   
                                    // диалогового окна, если установлен 
                                    // флаг OFN_ENABLETEMPLATEHANDLE
    LPCTSTR       lpstrFilter;		// указатель на буфер, содержащий одну 
                                    // или несколько пар текстовых строк, 
                                    // задающих фильтры для выбора имен файлов
    LPTSTR        lpstrCustomFilter; // указатель на статический буфер, 
                                    // который содержит пару текстовых строк 
                                    // фильтра для сохранения модели фильтра,  
                                    // выбранного пользователем
    DWORD         nMaxCustFilter;	// размер буфера в байтах
    DWORD         nFilterIndex;		// индекс текущего выбранного фильтра
    LPTSTR        lpstrFile;		// указатель на буфер, содержащий имя файла для  // инициализации текстового поля File Name диалога. После выбора файла и    // закрытия диалога буфер будет содержать полный путь к выбранному файлу
    DWORD         nMaxFile;			// размер буфера в байтах
    LPTSTR        lpstrFileTitle;	// указатель на буфер, содержащий имя и            // расширение выбранного файла
    DWORD         nMaxFileTitle;	//  размер буфера в байтах
    LPCTSTR       lpstrInitialDir;	// указатель на строку, которая определяет
                                    // начальный каталог
    LPCTSTR       lpstrTitle;		// указатель на строку, которая 
                                    // определяет заголовок диалогового окна
    DWORD         Flags;			// комбинация из одного или нескольких флагов,
                                    // объединенных  с помощью операции 
                                    // побитового "или" (|), позволяющих       
                                    // настроить внешний вид диалога
    WORD          nFileOffset;		// отсчитываемое от нуля смещение от начала 
                                    // пути до имени файла в строке lpstrFile
    WORD          nFileExtension;	// отсчитываемое от нуля смещение от начала 
                                    // пути до расширения имени файла в строке 
                                    //	lpstrFile
    LPCTSTR       lpstrDefExt;		// строка или указатель на буфер, который  
                                    // содержит  расширение имени файла, 
                                    // используемое по умолчанию
    LPARAM        lCustData;		// данные, которые передаются в HOOK-процедуру
    LPOFNHOOKPROC lpfnHook;			// адрес HOOK-процедуры (должен быть включен 
                                    // флаг OFN_ENABLEHOOK)
    LPCTSTR       lpTemplateName;	// Указатель на строку, которая именует       
                                    // ресурс шаблона диалога в модуле, 
                                    // идентифицированном полем hInstance
#if (_WIN32_WINNT >= 0x0500)
    void *        pvReserved;		// зарезервирован – должен быть 0
    DWORD         dwReserved;		// зарезервирован – должен быть 0
    DWORD         FlagsEx;			// нулевое значение либо флаг OFN_EX_NOPLACESBAR
#endif // (_WIN32_WINNT >= 0x0500)
} OPENFILENAME, *LPOPENFILENAME;


Поле Flags структуры OPENFILENAME представляет собой комбинацию из одного или
нескольких флагов, объединенных с помощью поразрядной операции «ИЛИ», 
и позволяющих настроить  внешний вид диалога. Ниже представлены наиболее 
часто используемые флаги.

•	OFN_ALLOWMULTISELECT - разрешает выбор нескольких фай-лов одновременно.
•	OFN_CREATEPROMPT -	если пользователь определяет несуще-ствующий файл, 
                        то выводится диалог, в котором предлагается создать файл.
•	OFN_EXTENSIONDIFFERENT - устанавливается после закрытия диалога  и указывает, 
                        что расширение выбранного файла отлича-ется от того, 
                        которое было ранее определено в поле lpstrDefExt. 
                        Этот флаг не устанавливается, если в поле lpstrDefExt 
                        был установлен NULL или файл не имеет расширения.
•	OFN_FILEMUSTEXIST - определяет, что в поле FileName поль-зователь может вводить
                        только имена существующих файлов. В противном случае на 
                        экран будет выводиться предупреждающее сообщение. Если 
                        этот флаг определен, то автоматически устанавливается 
                        флаг OFN_PATHMUSTEXIST.
•	OFN_HIDEREADONLY -	предписывает убрать из диалога фла-жок Read Only (только 
                        чтение).
•	OFN_NONETWORKBUTTON - скрывает и блокирует кнопку Network (сеть).
•	OFN_NOREADONLYRETURN - определяет, что выбранный файл не имеет атрибута 
                        «только чтение» и не располагается в защи-щенном от записи 
                        каталоге.
•	OFN_NOTESTFILECREATE - определяет, что файл не создается перед закрытием 
                        диалога.
•	OFN_NOVALIDATE -	определяет, что стандартные диалоги до-пускают наличие 
                        неразрешенных символов в именах возвращае-мых файлов.
•	OFN_OVERWRITEPROMPT - предписывает диалогу «Сохра-нить как» выводить окно 
                        запроса на перезапись, если выбран-ный файл уже существует.
•	OFN_PATHMUSTEXIST - определяет, что пользователь может использовать только 
                        имеющиеся пути и имена файлов. В противном случае на 
                        экран будет выводиться предупреждающее сообщение.
•	OFN_READONLY -		при отображении диалога флажок Read Only (только  чтение) 
                        будет установлен.
*/

// Практическая часть
/*
Разработать приложение «Текстовый редактор», обладающее  следующей 
функциональностью:

•	возможность создания нового текстового документа;
•	возможность открытия существующего текстового документа;
•	возможность сохранения текущего документа;
•	возможность сохранения текущего документа под новым именем.

*/


int _tmain(int argc, _TCHAR* argv[])
{
    return 0;
}

