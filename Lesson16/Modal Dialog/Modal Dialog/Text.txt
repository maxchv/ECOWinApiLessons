void CAdditionalModalDialog::Cls_OnCommand(HWND hwnd, int id, HWND hwndCtl, UINT codeNotify)
{
if(id == IDOK)
	{
		TCHAR buffer[200];
		GetWindowText(hEdit, buffer, 200);
		_tcscpy(text, buffer);
		HWND hParent = GetParent(hwnd);
		// Передача данных главному диалогу
		SetWindowText(hParent, TEXT("Привет от дочернего окна!"));
		EndDialog(hwnd, IDOK);
	}
	else if(id == IDCANCEL)
	{
		EndDialog(hwnd, IDCANCEL);
	}
}

CAdditionalModalDialog::CAdditionalModalDialog(LPCTSTR lpStr)
{
	ptr = this;
	_tcscpy(text, lpStr);
}

BOOL CAdditionalModalDialog::Cls_OnInitDialog(HWND hwnd, HWND hwndFocus, LPARAM lParam) 
{
	hEdit = GetDlgItem(hwnd, IDC_EDIT1);
	hStatic = GetDlgItem(hwnd, IDC_STATIC1);
	// Переданные от главного диалога данные отображаются на статике
	SetWindowText(hStatic, text);
	SetWindowText(hwnd, TEXT("Дополнительный модальный диалог"));
	SetWindowText(hEdit, TEXT("Передача данных главному диалогу!"));
	return TRUE;
}
/////////////////////////////////////////
void CMainModalDialog::Cls_OnCommand(HWND hwnd, int id, HWND hwndCtl, UINT codeNotify)
{
	if(id == IDC_BUTTON1)
	{
		CAdditionalModalDialog dlg;
		TCHAR buffer[200];
		GetWindowText(hEdit1, buffer, 200);
		// передача данных через public-поле класса CAdditionalModalDialog дополнительного диалога
		_tcscpy(dlg.text, buffer);
		INT_PTR result = DialogBox(GetModuleHandle(NULL), MAKEINTRESOURCE(IDD_DIALOG2), hwnd, CAdditionalModalDialog::DlgProc);
		if(result == IDOK)
		{
			// Переданные от дополнительного диалога данные отображаются на статике
			SetWindowText(hStatic1, dlg.text);
		}
	}
	else if(id == IDC_BUTTON2)
	{
		TCHAR buffer[200];
		GetWindowText(hEdit2, buffer, 200);
		// передача данных через конструктор класса CAdditionalModalDialog дополнительного диалога
		CAdditionalModalDialog dlg(buffer);
		INT_PTR result = DialogBox(GetModuleHandle(NULL), MAKEINTRESOURCE(IDD_DIALOG2), hwnd, CAdditionalModalDialog::DlgProc);
		if(result == IDOK)
		{
			// Переданные от дополнительного диалога данные отображаются на статике
			SetWindowText(hStatic2, dlg.text);
		}
	}
}
