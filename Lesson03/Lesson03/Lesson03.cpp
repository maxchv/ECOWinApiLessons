// Lesson03.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"

// Принципы обработки сообщений мыши
void ex01()
{
	// Сообщение мыши
	/*
		WM_LBUTTONDOWN – нажата левая кнопка мыши;
		WM_MBUTTONDOWN  - нажата средняя кнопка мыши;
		WM_RBUTTONDOWN – нажата правая кнопка мыши;
		WM_LBUTTONUP – отпущена левая кнопка мыши;
		WM_MBUTTONUP – отпущена средняя кнопка мыши;
		WM_RBUTTONUP – отпущена правая кнопка мыши.
		WM_LBUTTONDBLCLK – двойной щелчок левой кнопкой мыши;
		WM_MBUTTONDBLCLK – двойной щелчок средней кнопкой мыши;
		WM_RBUTTONDBLCLK - двойной щелчок правой кнопкой мыши.
		WM_MOUSEWHEEL - прокрутка колесика вызывает сообщение.

		Для всех этих сообщений значение параметра lParam содержит положение мыши. 
		При этом в младшем слове (младшие 2 байта) находится значение координаты х, 
		а в старшем слове (старшие 2 байта) — значение координаты у.
	*/
}

// Модификация стиля класса окна 
void ex02()
{
	// Задать стиль окна
	/*
	DWORD SetClassLong(
		HWND hWnd,		// дескриптор окна
		int nIndex,		// значение, определяющее, что нужно изменить, например:
						// GCL_STYLE – изменить стиль окна,
						// GCL_HICON – изменить дескриптор курсора,
						// GCL_HCURSOR – изменить дескриптор иконки
		LONG dwNewLong	// новое 32-битное значение
	);

	*/

	// Получить стиль окна
	/*
	DWORD GetClassLong(
		HWND hWnd, // дескриптор окна
		int nIndex // значение, определяющее, что нужно получить из WNDCLASSEX
		);
	*/

	// Пример изменения стиля класса окна :
	/*
		UINT style = GetClassLong(hWnd, GCL_STYLE);
		SetClassLong(hWnd, GCL_STYLE, style | CS_DBLCLKS);
	*/
}


// Принципы обработки нажатия клавиш
void ex03()
{

}

// Работа с окнами
void ex04()
{
	// Вывод строки в заголовок окна
	/*
	BOOL SetWindowText (
		HWND hWnd,		 // дескриптор окна, в котором должен быть изменен текст
		LPCTSTR lpString //указатель на строку, содержащую новый текст
	);
	*/

	// GetWindowRect позволяет получить размеры прямоугольника окна
	/*
	BOOL GetWindowRect(
		HWND hWnd,		//дескриптор окна
		LPRECT lpRect	//указатель на структуру RECT
	);
	*/

	// GetClientRect позволяет получить размеры прямоугольника, 
	// охватывающего клиентскую (рабочую) область окна
	/*
	BOOL GetClientRect(
		HWND hWnd,		//дескриптор окна
		LPRECT lpRect	//указатель на структуру RECT
	);

	*/

	// MoveWindow позволяет переместить окно, а также изменить его размеры
	/*
	BOOL MoveWindow(
		HWND hWnd,//дескриптор окна
		int X, //новая координата Х левого верхнего угла окна
		int Y, //новая координата Y левого верхнего угла окна

		int nWidth, //новая ширина окна
		int nHeight, //новая высота окна
		BOOL bRepaint //необходимость немедленной перерисовки окна
	);
	*/

	// BringWindowToTop активизирует окно и переносит его в верхнее положение, 
	// если оно находится позади других окон
	/*
	BOOL BringWindowToTop(
		HWND hWnd //дескриптор окна
	);
	*/

	// FindWindow поиска  окна  верхнего  уровня
	/*
	HWND FindWindow(
		LPCTSTR lpClassName, //имя класса окна
		LPCTSTR lpWindowName // заголовок окна
	);
	*/

	// FindWindowEx, которая служит для поиска дочерних окон (например, 
	// для поиска элементов управления диалогового окна)
	/*
	HWND FindWindowEx(
		HWND hwndParent,		//дескриптор родительского окна
		HWND hwndChildAfter,	//дескриптор дочернего окна, после которого следует    //начать поиск, либо 0 – для поиска, начиная с первого дочернего окна
		LPCTSTR lpszClass,		//имя класса окна
		LPCTSTR lpszWindow		// заголовок окна
	);

	*/
}


// Практическео задание
/*
1)	Написать приложение, в котором ведётся подсчёт количества «кликов» левой, 
    правой и средней кнопки мыши. Обновляемую статистику необходимо выводить в заголовок окна.
2)	Предположим, что существует прямоугольник, границы которого на 10 пикселей отстоят от 
    границ клиентской области окна. Необходимо при нажатии левой кнопки мыши выводить в заголовок
	окна сообщение о том, где произошел щелчок мышью: внутри прямоугольника, снаружи или на границе 
	прямоугольника. При нажатии правой кнопки мыши необходимо выводить в заголовок окна информацию
	о размере клиентской области окна (ширина и высота клиентской области окна).
*/

// Домашенее задание
/*
1)	Написать приложение, позволяющее при нажатии левой кнопки мыши изменить текст в заголовке 
	окна стандартного приложения «Калькулятор», а при нажатии правой кнопки мыши сместить 
	вправо кнопку «пуск», изменив на ней надпись.

2)	Написать приложение, обладающее следующей функциональностью:
	•	при нажатии кнопки <Enter> окно позиционируется в левый верхний угол 
		экрана с размерами (300Х300);
	•	с помощью клавиш управления курсором осуществляется перемещение окна.
*/

int main()
{
    return 0;
}

